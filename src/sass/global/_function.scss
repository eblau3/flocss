@use 'map' as *;
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';

// map-deep-get
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if not map.has-key($map, $key) {
      @return null;
    }

    $map: map.get($map, $key);
  }
  @return $map;
}

// rem
@function rem($px) {
  @return calc(($px / 16) * 1rem);
}

// strip-unit
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

// responsive-clamp
@function responsive-clamp($min-size, $max-size, $min-container: 375px, $max-container: 1200px) {
  $min-size: strip-unit($min-size);
  $max-size: strip-unit($max-size);
  $min-container: strip-unit($min-container);
  $max-container: strip-unit($max-container);
  $slope: math.div(($max-size - $min-size), ($max-container - $min-container));
  $y-intercept: $min-size - $slope * $min-container;
  @return clamp(#{$min-size}px, #{$y-intercept}px + #{$slope * 100}vw, #{$max-size}px);
}

// image
@function image($path) {
  @return url('#{$image-path}/#{$path}');
}
